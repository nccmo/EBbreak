#! /usr/bin/env python

from bp_utils.run import *
import argparse

####################
# top level parser
parser = argparse.ArgumentParser(prog = "bp_utils", formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument("--version", action = "version", version = "bp_utils-0.1.0")

subparsers = parser.add_subparsers()

####################


####################
# GenomonSV parse
parse = subparsers.add_parser("parse", 
                              help = "Parse and cluster supporting read pairs for candidate breakpoints",
                              formatter_class=argparse.ArgumentDefaultsHelpFormatter)
 
parse.add_argument("bam_file", metavar = "input.bam", type = str,
                   help = "path to input bam file")

parse.add_argument("output_file", metavar = "output_file", type = str,
                   help = "path to output file")

parse.add_argument("--debug", default = False, action = 'store_true', help = "keep intermediate files")

parse.add_argument("--key_seq_size", type = int, default = 8,
                   help = "size of junction bases on breakpoint to classify the breakpoint (default: %(default)s)")

parse.add_argument("--min_major_clip_size", type = int, default = 8,
                   help = "minimum number of clipped bases for junction read (default: %(default)s)")

parse.add_argument("--max_minor_clip_size", type = int, default = 15,
                   help = "if the clipped bases numbers of both sides are greater than this value, then the read is filtered out (default: %(default)s)")

parse.add_argument("--check_interval", type = int, default = 1000000,
                   help = "the default value will work for most cases. but when memory flows, please try reducing this value (default: %(default)s)")

parse.set_defaults(func = parse_main)
####################   

# merge control
merge_control = subparsers.add_parser("merge_control",
                                      help = "merge, compress and index break point file generated by parse function",
                                      formatter_class=argparse.ArgumentDefaultsHelpFormatter)

merge_control.add_argument("bp_file_list", metavar = "bp_file_list.txt", default = None, type = str,
                           help = "breakpoint ifle path list")

merge_control.add_argument("output_file", default = None, type = str,
                           help = "the path of the output file")

merge_control.add_argument("--support_num_thres", type = int, default = 2,
                           help = "remove breakpoints whose supporting numbers are below this value (default: %(default)s)")

merge_control.add_argument("--sample_num_thres", type = int, default = 2,
                           help = "register breakpoints at least shared by specified number of samples (default: %(default)s)")

merge_control.set_defaults(func = merge_control_main)


####################
filt = subparsers.add_parser("filt", 
                             help = "Filter candidate somatic breakpoint")

filt.add_argument("tumor_bp_file", metavar = "tumor_bp_file.txt.gz", type = str,
                  help = "path to tumor breakpoint file generated by parse function")

filt.add_argument("tumor_bam", metavar = "tumor.bam", type = str,
                  help = "path to tumor bam file")

filt.add_argument("output_file", metavar = "output.txt", type = str,
                  help = "path to output file")

filt.add_argument("reference_genome", metavar = "reference.fa", type = str,
                  help = "path to reference genome")

filt.add_argument("--matched_control_bp_file", metavar = "matched_control_bp_file.txt.gz", default = "", type = str,
                  help = "path to matched control breakpoint file generated by parse function")

filt.add_argument("--matched_control_bam", metavar = "matched_control.bam", default = "", type = str,
                         help = "path to matched control bam file")

filt.add_argument("--merged_control_file", metavar = "merged_control.txt.gz", default = "", type = str,
                         help = "path to the non-matched control panel data generated by merge function")

# filt_parser.add_argument("--debug", default = False, action = 'store_true', help = "keep intermediate files")

filt.add_argument("--min_tumor_num_thres", type = int, default = 3,
                  help = "minimum required number of supporting read (default: %(default)s)")

filt.add_argument("--min_tumor_allele_freq", type = float, default = 0.03,
                  help = "minimum required allele frequency of the tumor sample (default: %(default)s)")

filt.add_argument("--max_control_num_thres", type = int, default = 1,
                  help = "maximum allowed number of reads in matched control sample (default: %(default)s)")

filt.add_argument("--max_control_allele_freq", type = float, default = 0.03,
                  help = "maximum allowed allele frequency of matched control sample (default: %(default)s)")

filt.add_argument("--max_fisher_pvalue", type = float, default = 0.10,
                  help = "maximum allowed fisher's exact test p-value (default: %(default)s)")

filt.add_argument("--min_median_mapq", type = int, default = 40,
                  help = "threshold of mapping quality (if the median of supporting reads is below this value, then filtered out) (default: %(default)s)")

filt.add_argument("--min_max_clip_size", type = int, default = 30,
                  help = "threshould of maximum clipped size (if the maximum clipped size is below this value, then filtered out) (default: %(default)s)")

filt.add_argument("--ignore_juncseq_consistency", action='store_true', default=False, 
                         help = "ignore juncseq consistency when comparing with control")

filt.add_argument("--permissible_range", type = int, default = 0,
                  help = "permissible range for control breakpoint search")

filt.set_defaults(func = filt_main)
####################
# contig
contig = subparsers.add_parser("contig",
                               help = "Generate contig by assembling supprint reads candidate somatic breakpoint")

contig.add_argument("tumor_bp_filt_file", metavar = "tumor_bp_filt.txt", type = str,
                     help = "path to tumor filetered breakpoint file generated by filt function")

contig.add_argument("tumor_bp_file", metavar = "tumor_bp_file.txt.gz", type = str,
                     help = "path to tumor breakpoint file generated by parse function")

contig.add_argument("tumor_bam", metavar = "tumor.bam", type = str,
                    help = "path to tumor bam file")

contig.add_argument("output_file", metavar = "output.txt", type = str,
                    help = "path to output file")

contig.add_argument("reference_genome", metavar = "reference.fa", type = str,
                    help = "path to reference genome")

contig.add_argument("--grc", default = False, action = 'store_true',
                    help = "convert chromosome names to Genome Reference Consortium nomenclature (default: %(default)s)")

contig.add_argument("--genome_id", choices = ["hg19", "hg38", "mm10"], default = "hg19",
                    help = "the genome id used for selecting UCSC-GRC chromosome name corresponding files (default: %(default)s)")

contig.add_argument("--blat_option", type = str, default = "-stepSize=5 -repMatch=2253",
                    help = "option used in blat")
 
contig.add_argument("--virus_db", type = str, default = "",
                    help = "path to virus sequence database (fasta format)")

contig.add_argument("--repeat_db", type = str, default = "",
                    help = "path to repeat sequence database (fasta format)")

contig.add_argument("--min_contig_length", type = int, default = 0,
                  help = "threshould of minimum contig length (if the generated contig size is below this value, then filtered out) (default: %(default)s)")

contig.set_defaults(func = contig_main)
####################

args = parser.parse_args()

args.func(args)          
